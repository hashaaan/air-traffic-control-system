package airtrafficcontrol;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Color;
import static java.lang.Thread.sleep;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.InputVerifier;
import javax.swing.JComponent;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author hashan
 */
public class FindRouteUI extends javax.swing.JFrame {
    Vertex[] airports = new Vertex[1];
    AirTrafficControl mainData;

    /**
     * Creates new form ControlPanel
     */
    public FindRouteUI() {
        initComponents();
//        txtFrom.setInputVerifier(new PassVerifier());
//        txtTo.setInputVerifier(new PassVerifier());
        
//        loadDataPQ();
        //displayAirports();
    }
    
     public FindRouteUI(AirTrafficControl air) {
          initComponents();
          
         
//          jScrollPane2
         mainData = air;    
         inLoad();
     }
     
     final void inLoad()
     {
        cmbDestination.removeAllItems();
        cmbSource.removeAllItems();
        cmbSource.setToolTipText(("Select Source"));
        cmbDestination.setToolTipText("Select Destination");
        for(int i=0;i<mainData.codes.length; i++)
        {
            cmbSource.addItem(new ComboItem(mainData.codes[i]+"-"+mainData.airports[0][i],mainData.codes[i]));
            cmbDestination.addItem(new ComboItem(mainData.codes[i]+"-"+mainData.airports[0][i],mainData.codes[i]));
        }
        tblAirports.setModel(new DefaultTableModel(new Object[]{"Order", "Airport"},1));
//                new javax.swing.table.DefaultTableModel(
//                            new Object [][] {
//                                {null, null},
//                                {null, null},
//                                {null, null},
//                                {null, null}
//                            },
//                            new String [] {
//                                "Order", "Airport"
//                            }
//                        ) {
//                            boolean[] canEdit = new boolean [] {
//                                false, false
//                            };
//
//                            public boolean isCellEditable(int rowIndex, int columnIndex) {
//                                return canEdit [columnIndex];
//                            }
//                        }); 
        
     }
     
     private Object makeObj(final String item)  {
     return new Object() { public String toString() { return item; } };
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        mainTitle = new javax.swing.JLabel();
        labelFrom = new javax.swing.JLabel();
        labelTo = new javax.swing.JLabel();
        btnFind = new javax.swing.JButton();
        errFrom = new javax.swing.JLabel();
        cmbDestination = new javax.swing.JComboBox();
        cmbSource = new javax.swing.JComboBox();
        txtTest = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblAirports = new javax.swing.JTable();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(" Air Traffic Control System");
        setResizable(false);

        mainTitle.setFont(new java.awt.Font("Tahoma", 3, 36)); // NOI18N
        mainTitle.setText("Find The Shortest Route");

        labelFrom.setText("From Where");

        labelTo.setText("To Where");

        btnFind.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        btnFind.setText("Find");
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        cmbDestination.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbSource.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        txtTest.setText("jTextField1");

        tblAirports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tblAirports);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(57, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(mainTitle)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(errFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(42, 42, 42))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(cmbSource, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                                .addComponent(labelTo, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(292, 292, 292))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(300, 300, 300)
                                .addComponent(cmbDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(mainTitle)
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTo, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbSource)
                    .addComponent(cmbDestination, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(errFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(txtTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        // TODO add your handling code here:
       
       
        mainData.codes[2] = "JK";
        String destination = ((ComboItem)(cmbDestination.getSelectedItem())).getValue();
        txtTest.setText(destination);
        String source = ((ComboItem)(cmbSource.getSelectedItem())).getValue();
        txtTest.setText(source);
        mainData.calc(source, destination);
        int dest = mainData.codeSearch(mainData.codes,destination);
        System.out.println(dest);
        int count=0;
        DefaultTableModel model = (DefaultTableModel) tblAirports.getModel();
        printPath(mainData.solution, dest, count, model);
    }//GEN-LAST:event_btnFindActionPerformed

    void printPath(double[][] solutions,int dest,int count,DefaultTableModel model)
    {
        
        if(count==0)
        { 
            int rw = model.getRowCount();
            for(int i=0;i<rw;i++)
            {
                System.out.println("jjjjj");
                model.removeRow(0);    
            }
        }
         System.out.println("UID" + dest);
        if((dest!=-1)&&(solutions[0][dest]==1))  
        { 
            System.out.println("jsssss");
            model.addRow(new Object[]{count,mainData.codes[dest]});
            if(solutions[1][dest]!=0)
            {
                printPath(solutions, (int)solutions[2][dest],count+1,(DefaultTableModel) tblAirports.getModel());
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FindRouteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FindRouteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FindRouteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FindRouteUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FindRouteUI().setVisible(true);
            }
        });
    }
    
    /* private void validateInput() {
        String from = txtFrom.getText();
        if(from.equals("")){
            System.out.println("Error!" + from);
        } 
    }*/
    
    /* private void displayAirports() {
        for (Vertex airport : airports) {
            System.out.println(airport);
        }
    }*/
    
    private void setEdgesAndWeight(String src, String dest, double duration) {
        System.out.println("src: "+src+" dest: "+dest+" dur: "+duration);
        // find source airport
        for (Vertex airportSrc : airports) {
            if(airportSrc.name.equals(src)){
                // find destination airport
                for (Vertex airportDest : airports) {
                    if(airportDest.name.equals(dest)){
                        airportSrc.adjacencies = new Edge[]{ new Edge(airportDest, duration) };
                    }
                }
            }
        }
    }
    
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFind;
    private javax.swing.JComboBox cmbDestination;
    private javax.swing.JComboBox cmbSource;
    private javax.swing.JLabel errFrom;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel labelFrom;
    private javax.swing.JLabel labelTo;
    private javax.swing.JLabel mainTitle;
    private javax.swing.JTable tblAirports;
    private javax.swing.JTextField txtTest;
    // End of variables declaration//GEN-END:variables
}


class PassVerifier extends InputVerifier {
    @Override
    public boolean verify(JComponent input) {
          JTextField tf = (JTextField) input;
          if("".equals(tf.getText())) {
            Border border = BorderFactory.createLineBorder(Color.red, 1);
            tf.setBorder(border);
            return false;
          } else {
             Border border = BorderFactory.createLineBorder(Color.black, 1);
             tf.setBorder(border);
             return true;
          }
    }
}
class ComboItem
{
    private String key;
    private String value;


    public ComboItem(String key, String value)
    {
        this.key = key;
        this.value = value;
    
    }

    @Override
    public String toString()
    {
        return key;
    }

    public String getKey()
    {
        return key;
    }

    public String getValue()
    {
        return value;
    }
}

